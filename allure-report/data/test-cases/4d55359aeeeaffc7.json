{"uid":"4d55359aeeeaffc7","name":"Добавление товара в вишлист неавторизованным пользователем","fullName":"tests.test_wishlist.TestCart#test_add_product_to_wishlist_by_unauthorized_user","historyId":"c52ad5c6324ab3bb265178c5696f71cf","time":{"start":1673651903789,"stop":1673651918487,"duration":14698},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0080F243]\n\t(No symbol) [0x00797FD1]\n\t(No symbol) [0x0068CF10]\n\t(No symbol) [0x006BD003]\n\t(No symbol) [0x006B32A6]\n\t(No symbol) [0x006D858C]\n\t(No symbol) [0x006B2BFF]\n\t(No symbol) [0x006D8804]\n\t(No symbol) [0x006EC9EB]\n\t(No symbol) [0x006D8386]\n\t(No symbol) [0x006B163C]\n\t(No symbol) [0x006B269D]\n\tGetHandleVerifier [0x00AA9A22+2655074]\n\tGetHandleVerifier [0x00A9CA24+2601828]\n\tGetHandleVerifier [0x008B8C0A+619850]\n\tGetHandleVerifier [0x008B7830+614768]\n\t(No symbol) [0x007A05FC]\n\t(No symbol) [0x007A5968]\n\t(No symbol) [0x007A5A55]\n\t(No symbol) [0x007B051B]\n\tBaseThreadInitThunk [0x76736A39+25]\n\tRtlGetFullPathName_UEx [0x77727D1D+173]\n\tRtlGetFullPathName_UEx [0x77727CEB+123]","statusTrace":"self = <tests.test_wishlist.TestCart object at 0x000002DC6B5B0730>\nheader = <pages.header.Header object at 0x000002DC6B676440>\nproduct_card_page = <pages.product_card_page.ProductCardPage object at 0x000002DC6B677C40>\nwishlist_page = <pages.wishlist_page.WishlistPage object at 0x000002DC6B5B0CD0>\nnotification_bar = <pages.notification_bar.NotificationBar object at 0x000002DC6B5B0DC0>\n\n    @title('Добавление товара в вишлист неавторизованным пользователем')\n    def test_add_product_to_wishlist_by_unauthorized_user(self, header, product_card_page, wishlist_page,\n                                                          notification_bar):\n        path = choice(PRODUCTS_WHO_CAN_ADD_TO_WISHLIST)\n    \n        product_card_page.open(path=path)\n        product_card_page.should_be_open_product_card_page(path=path)\n    \n        product = product_card_page.get_product_data()\n    \n>       product_card_page.add_product_to_wishlist(is_new_sender=True)\n\ntests\\test_wishlist.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\steps.py:29: in impl\n    step_result = func(*args, **kwargs)\npages\\product_card_page.py:151: in add_product_to_wishlist\n    self.fill_attributes_block()\nutils\\steps.py:29: in impl\n    step_result = func(*args, **kwargs)\npages\\product_card_page.py:68: in fill_attributes_block\n    choice(radio_buttons).click()\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:410: in _execute\n    return self._parent.execute(command, params)\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002DC6B677B20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...Thunk [0x76736A39+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77727D1D+173]\\\\n\\\\tRtlGetFullPathName_UEx [0x77727CEB+123]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0080F243]\nE       \t(No symbol) [0x00797FD1]\nE       \t(No symbol) [0x0068CF10]\nE       \t(No symbol) [0x006BD003]\nE       \t(No symbol) [0x006B32A6]\nE       \t(No symbol) [0x006D858C]\nE       \t(No symbol) [0x006B2BFF]\nE       \t(No symbol) [0x006D8804]\nE       \t(No symbol) [0x006EC9EB]\nE       \t(No symbol) [0x006D8386]\nE       \t(No symbol) [0x006B163C]\nE       \t(No symbol) [0x006B269D]\nE       \tGetHandleVerifier [0x00AA9A22+2655074]\nE       \tGetHandleVerifier [0x00A9CA24+2601828]\nE       \tGetHandleVerifier [0x008B8C0A+619850]\nE       \tGetHandleVerifier [0x008B7830+614768]\nE       \t(No symbol) [0x007A05FC]\nE       \t(No symbol) [0x007A5968]\nE       \t(No symbol) [0x007A5A55]\nE       \t(No symbol) [0x007B051B]\nE       \tBaseThreadInitThunk [0x76736A39+25]\nE       \tRtlGetFullPathName_UEx [0x77727D1D+173]\nE       \tRtlGetFullPathName_UEx [0x77727CEB+123]\n\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1673651888083,"stop":1673651903787,"duration":15704},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"product_card_page","time":{"start":1673651903788,"stop":1673651903788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"notification_bar","time":{"start":1673651903788,"stop":1673651903788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"header","time":{"start":1673651903788,"stop":1673651903788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"wishlist_page","time":{"start":1673651903788,"stop":1673651903788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0080F243]\n\t(No symbol) [0x00797FD1]\n\t(No symbol) [0x0068CF10]\n\t(No symbol) [0x006BD003]\n\t(No symbol) [0x006B32A6]\n\t(No symbol) [0x006D858C]\n\t(No symbol) [0x006B2BFF]\n\t(No symbol) [0x006D8804]\n\t(No symbol) [0x006EC9EB]\n\t(No symbol) [0x006D8386]\n\t(No symbol) [0x006B163C]\n\t(No symbol) [0x006B269D]\n\tGetHandleVerifier [0x00AA9A22+2655074]\n\tGetHandleVerifier [0x00A9CA24+2601828]\n\tGetHandleVerifier [0x008B8C0A+619850]\n\tGetHandleVerifier [0x008B7830+614768]\n\t(No symbol) [0x007A05FC]\n\t(No symbol) [0x007A5968]\n\t(No symbol) [0x007A5A55]\n\t(No symbol) [0x007B051B]\n\tBaseThreadInitThunk [0x76736A39+25]\n\tRtlGetFullPathName_UEx [0x77727D1D+173]\n\tRtlGetFullPathName_UEx [0x77727CEB+123]","statusTrace":"self = <tests.test_wishlist.TestCart object at 0x000002DC6B5B0730>\nheader = <pages.header.Header object at 0x000002DC6B676440>\nproduct_card_page = <pages.product_card_page.ProductCardPage object at 0x000002DC6B677C40>\nwishlist_page = <pages.wishlist_page.WishlistPage object at 0x000002DC6B5B0CD0>\nnotification_bar = <pages.notification_bar.NotificationBar object at 0x000002DC6B5B0DC0>\n\n    @title('Добавление товара в вишлист неавторизованным пользователем')\n    def test_add_product_to_wishlist_by_unauthorized_user(self, header, product_card_page, wishlist_page,\n                                                          notification_bar):\n        path = choice(PRODUCTS_WHO_CAN_ADD_TO_WISHLIST)\n    \n        product_card_page.open(path=path)\n        product_card_page.should_be_open_product_card_page(path=path)\n    \n        product = product_card_page.get_product_data()\n    \n>       product_card_page.add_product_to_wishlist(is_new_sender=True)\n\ntests\\test_wishlist.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\steps.py:29: in impl\n    step_result = func(*args, **kwargs)\npages\\product_card_page.py:151: in add_product_to_wishlist\n    self.fill_attributes_block()\nutils\\steps.py:29: in impl\n    step_result = func(*args, **kwargs)\npages\\product_card_page.py:68: in fill_attributes_block\n    choice(radio_buttons).click()\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:410: in _execute\n    return self._parent.execute(command, params)\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002DC6B677B20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...Thunk [0x76736A39+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77727D1D+173]\\\\n\\\\tRtlGetFullPathName_UEx [0x77727CEB+123]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0080F243]\nE       \t(No symbol) [0x00797FD1]\nE       \t(No symbol) [0x0068CF10]\nE       \t(No symbol) [0x006BD003]\nE       \t(No symbol) [0x006B32A6]\nE       \t(No symbol) [0x006D858C]\nE       \t(No symbol) [0x006B2BFF]\nE       \t(No symbol) [0x006D8804]\nE       \t(No symbol) [0x006EC9EB]\nE       \t(No symbol) [0x006D8386]\nE       \t(No symbol) [0x006B163C]\nE       \t(No symbol) [0x006B269D]\nE       \tGetHandleVerifier [0x00AA9A22+2655074]\nE       \tGetHandleVerifier [0x00A9CA24+2601828]\nE       \tGetHandleVerifier [0x008B8C0A+619850]\nE       \tGetHandleVerifier [0x008B7830+614768]\nE       \t(No symbol) [0x007A05FC]\nE       \t(No symbol) [0x007A5968]\nE       \t(No symbol) [0x007A5A55]\nE       \t(No symbol) [0x007B051B]\nE       \tBaseThreadInitThunk [0x76736A39+25]\nE       \tRtlGetFullPathName_UEx [0x77727D1D+173]\nE       \tRtlGetFullPathName_UEx [0x77727CEB+123]\n\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: ElementNotInteractableException","steps":[{"name":"Проверить, что открыта страница карточки продукта","time":{"start":1673651911199,"stop":1673651911335,"duration":136},"status":"passed","steps":[],"attachments":[{"uid":"4f4139693f64d46","name":"Screenshot","source":"4f4139693f64d46.png","type":"image/png","size":147357}],"parameters":[{"name":"path","value":"'blue-and-green-sneaker'"}],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"Добавить товар в вишлист","time":{"start":1673651916944,"stop":1673651918486,"duration":1542},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0080F243]\n\t(No symbol) [0x00797FD1]\n\t(No symbol) [0x0068CF10]\n\t(No symbol) [0x006BD003]\n\t(No symbol) [0x006B32A6]\n\t(No symbol) [0x006D858C]\n\t(No symbol) [0x006B2BFF]\n\t(No symbol) [0x006D8804]\n\t(No symbol) [0x006EC9EB]\n\t(No symbol) [0x006D8386]\n\t(No symbol) [0x006B163C]\n\t(No symbol) [0x006B269D]\n\tGetHandleVerifier [0x00AA9A22+2655074]\n\tGetHandleVerifier [0x00A9CA24+2601828]\n\tGetHandleVerifier [0x008B8C0A+619850]\n\tGetHandleVerifier [0x008B7830+614768]\n\t(No symbol) [0x007A05FC]\n\t(No symbol) [0x007A5968]\n\t(No symbol) [0x007A5A55]\n\t(No symbol) [0x007B051B]\n\tBaseThreadInitThunk [0x76736A39+25]\n\tRtlGetFullPathName_UEx [0x77727D1D+173]\n\tRtlGetFullPathName_UEx [0x77727CEB+123]\n\n","statusTrace":"  File \"D:\\a\\demo_web_shop\\demo_web_shop\\utils\\steps.py\", line 29, in impl\n    step_result = func(*args, **kwargs)\n  File \"D:\\a\\demo_web_shop\\demo_web_shop\\pages\\product_card_page.py\", line 151, in add_product_to_wishlist\n    self.fill_attributes_block()\n  File \"D:\\a\\demo_web_shop\\demo_web_shop\\utils\\steps.py\", line 29, in impl\n    step_result = func(*args, **kwargs)\n  File \"D:\\a\\demo_web_shop\\demo_web_shop\\pages\\product_card_page.py\", line 68, in fill_attributes_block\n    choice(radio_buttons).click()\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 410, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Заполнить поля c атрибутами товара","time":{"start":1673651916959,"stop":1673651918369,"duration":1410},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0080F243]\n\t(No symbol) [0x00797FD1]\n\t(No symbol) [0x0068CF10]\n\t(No symbol) [0x006BD003]\n\t(No symbol) [0x006B32A6]\n\t(No symbol) [0x006D858C]\n\t(No symbol) [0x006B2BFF]\n\t(No symbol) [0x006D8804]\n\t(No symbol) [0x006EC9EB]\n\t(No symbol) [0x006D8386]\n\t(No symbol) [0x006B163C]\n\t(No symbol) [0x006B269D]\n\tGetHandleVerifier [0x00AA9A22+2655074]\n\tGetHandleVerifier [0x00A9CA24+2601828]\n\tGetHandleVerifier [0x008B8C0A+619850]\n\tGetHandleVerifier [0x008B7830+614768]\n\t(No symbol) [0x007A05FC]\n\t(No symbol) [0x007A5968]\n\t(No symbol) [0x007A5A55]\n\t(No symbol) [0x007B051B]\n\tBaseThreadInitThunk [0x76736A39+25]\n\tRtlGetFullPathName_UEx [0x77727D1D+173]\n\tRtlGetFullPathName_UEx [0x77727CEB+123]\n\n","statusTrace":"  File \"D:\\a\\demo_web_shop\\demo_web_shop\\utils\\steps.py\", line 29, in impl\n    step_result = func(*args, **kwargs)\n  File \"D:\\a\\demo_web_shop\\demo_web_shop\\pages\\product_card_page.py\", line 68, in fill_attributes_block\n    choice(radio_buttons).click()\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 410, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[{"uid":"ab57095857f1dd0a","name":"Screenshot","source":"ab57095857f1dd0a.png","type":"image/png","size":147224}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1}],"attachments":[{"uid":"e8fe633f48c0e4aa","name":"Screenshot","source":"e8fe633f48c0e4aa.png","type":"image/png","size":147224}],"parameters":[{"name":"quantity","value":"1"},{"name":"is_new_sender","value":"True"}],"stepsCount":1,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"browser::0","time":{"start":1673651918757,"stop":1673651926071,"duration":7314},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Вишлист"},{"name":"epic","value":"Frontend"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_wishlist"},{"name":"subSuite","value":"TestCart"},{"name":"host","value":"fv-az365-755"},{"name":"thread","value":"1256-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_wishlist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"4d55359aeeeaffc7.json","parameterValues":[]}