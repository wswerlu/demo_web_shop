{"uid":"8e5bcb75e3070a3c","name":"Добавление товара в вишлист неавторизованным пользователем","fullName":"tests.test_wishlist.TestCart#test_add_product_to_wishlist_by_unauthorized_user","historyId":"c52ad5c6324ab3bb265178c5696f71cf","time":{"start":1673128206603,"stop":1673128241576,"duration":34973},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/wishlist\" class=\"ico-wishlist\">...</a> is not clickable at point (931, 9). Other element would receive the click: <div id=\"bar-notification\" class=\"bar-notification success\" style=\"display: block;\">...</div>\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0084F243]\n\t(No symbol) [0x007D7FD1]\n\t(No symbol) [0x006CD04D]\n\t(No symbol) [0x007028B9]\n\t(No symbol) [0x007008CC]\n\t(No symbol) [0x006FE4CB]\n\t(No symbol) [0x006FD164]\n\t(No symbol) [0x006F32A6]\n\t(No symbol) [0x0071858C]\n\t(No symbol) [0x006F2BFF]\n\t(No symbol) [0x00718804]\n\t(No symbol) [0x0072C9EB]\n\t(No symbol) [0x00718386]\n\t(No symbol) [0x006F163C]\n\t(No symbol) [0x006F269D]\n\tGetHandleVerifier [0x00AE9A22+2655074]\n\tGetHandleVerifier [0x00ADCA24+2601828]\n\tGetHandleVerifier [0x008F8C0A+619850]\n\tGetHandleVerifier [0x008F7830+614768]\n\t(No symbol) [0x007E05FC]\n\t(No symbol) [0x007E5968]\n\t(No symbol) [0x007E5A55]\n\t(No symbol) [0x007F051B]\n\tBaseThreadInitThunk [0x76666A39+25]\n\tRtlGetFullPathName_UEx [0x77BA7D1D+173]\n\tRtlGetFullPathName_UEx [0x77BA7CEB+123]","statusTrace":"self = <tests.test_wishlist.TestCart object at 0x000002227BBED750>\nheader = <pages.header.Header object at 0x000002227C55AB30>\nproduct_card_page = <pages.product_card_page.ProductCardPage object at 0x000002227C56C610>\nwishlist_page = <pages.wishlist_page.WishlistPage object at 0x000002227C56C490>\n\n    @title('Добавление товара в вишлист неавторизованным пользователем')\n    def test_add_product_to_wishlist_by_unauthorized_user(self, header, product_card_page, wishlist_page):\n        path = choice(PRODUCTS_WHO_CAN_ADD_TO_WISHLIST)\n    \n        product_card_page.open(path=path)\n        product_card_page.should_be_open_product_card_page(path=path)\n    \n        product = product_card_page.get_product_data()\n    \n        product_card_page.add_product_to_wishlist(is_new_sender=True)\n        product_card_page.should_be_message_about_adding_product_to_wishlist()\n        header.can_see_product_quantity_in_wishlist()\n>       header.go_to_wishlist_page()\n\ntests\\test_wishlist.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\steps.py:29: in impl\n    step_result = func(*args, **kwargs)\npages\\header.py:163: in go_to_wishlist_page\n    self.find_element(*Locators.WISHLIST_LINK).click()\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:410: in _execute\n    return self._parent.execute(command, params)\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002227C55BAC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...Thunk [0x76666A39+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77BA7D1D+173]\\\\n\\\\tRtlGetFullPathName_UEx [0x77BA7CEB+123]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/wishlist\" class=\"ico-wishlist\">...</a> is not clickable at point (931, 9). Other element would receive the click: <div id=\"bar-notification\" class=\"bar-notification success\" style=\"display: block;\">...</div>\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0084F243]\nE       \t(No symbol) [0x007D7FD1]\nE       \t(No symbol) [0x006CD04D]\nE       \t(No symbol) [0x007028B9]\nE       \t(No symbol) [0x007008CC]\nE       \t(No symbol) [0x006FE4CB]\nE       \t(No symbol) [0x006FD164]\nE       \t(No symbol) [0x006F32A6]\nE       \t(No symbol) [0x0071858C]\nE       \t(No symbol) [0x006F2BFF]\nE       \t(No symbol) [0x00718804]\nE       \t(No symbol) [0x0072C9EB]\nE       \t(No symbol) [0x00718386]\nE       \t(No symbol) [0x006F163C]\nE       \t(No symbol) [0x006F269D]\nE       \tGetHandleVerifier [0x00AE9A22+2655074]\nE       \tGetHandleVerifier [0x00ADCA24+2601828]\nE       \tGetHandleVerifier [0x008F8C0A+619850]\nE       \tGetHandleVerifier [0x008F7830+614768]\nE       \t(No symbol) [0x007E05FC]\nE       \t(No symbol) [0x007E5968]\nE       \t(No symbol) [0x007E5A55]\nE       \t(No symbol) [0x007F051B]\nE       \tBaseThreadInitThunk [0x76666A39+25]\nE       \tRtlGetFullPathName_UEx [0x77BA7D1D+173]\nE       \tRtlGetFullPathName_UEx [0x77BA7CEB+123]\n\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1673128201210,"stop":1673128206602,"duration":5392},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"header","time":{"start":1673128206602,"stop":1673128206602,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"product_card_page","time":{"start":1673128206602,"stop":1673128206602,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"wishlist_page","time":{"start":1673128206602,"stop":1673128206602,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/wishlist\" class=\"ico-wishlist\">...</a> is not clickable at point (931, 9). Other element would receive the click: <div id=\"bar-notification\" class=\"bar-notification success\" style=\"display: block;\">...</div>\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0084F243]\n\t(No symbol) [0x007D7FD1]\n\t(No symbol) [0x006CD04D]\n\t(No symbol) [0x007028B9]\n\t(No symbol) [0x007008CC]\n\t(No symbol) [0x006FE4CB]\n\t(No symbol) [0x006FD164]\n\t(No symbol) [0x006F32A6]\n\t(No symbol) [0x0071858C]\n\t(No symbol) [0x006F2BFF]\n\t(No symbol) [0x00718804]\n\t(No symbol) [0x0072C9EB]\n\t(No symbol) [0x00718386]\n\t(No symbol) [0x006F163C]\n\t(No symbol) [0x006F269D]\n\tGetHandleVerifier [0x00AE9A22+2655074]\n\tGetHandleVerifier [0x00ADCA24+2601828]\n\tGetHandleVerifier [0x008F8C0A+619850]\n\tGetHandleVerifier [0x008F7830+614768]\n\t(No symbol) [0x007E05FC]\n\t(No symbol) [0x007E5968]\n\t(No symbol) [0x007E5A55]\n\t(No symbol) [0x007F051B]\n\tBaseThreadInitThunk [0x76666A39+25]\n\tRtlGetFullPathName_UEx [0x77BA7D1D+173]\n\tRtlGetFullPathName_UEx [0x77BA7CEB+123]","statusTrace":"self = <tests.test_wishlist.TestCart object at 0x000002227BBED750>\nheader = <pages.header.Header object at 0x000002227C55AB30>\nproduct_card_page = <pages.product_card_page.ProductCardPage object at 0x000002227C56C610>\nwishlist_page = <pages.wishlist_page.WishlistPage object at 0x000002227C56C490>\n\n    @title('Добавление товара в вишлист неавторизованным пользователем')\n    def test_add_product_to_wishlist_by_unauthorized_user(self, header, product_card_page, wishlist_page):\n        path = choice(PRODUCTS_WHO_CAN_ADD_TO_WISHLIST)\n    \n        product_card_page.open(path=path)\n        product_card_page.should_be_open_product_card_page(path=path)\n    \n        product = product_card_page.get_product_data()\n    \n        product_card_page.add_product_to_wishlist(is_new_sender=True)\n        product_card_page.should_be_message_about_adding_product_to_wishlist()\n        header.can_see_product_quantity_in_wishlist()\n>       header.go_to_wishlist_page()\n\ntests\\test_wishlist.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\steps.py:29: in impl\n    step_result = func(*args, **kwargs)\npages\\header.py:163: in go_to_wishlist_page\n    self.find_element(*Locators.WISHLIST_LINK).click()\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:410: in _execute\n    return self._parent.execute(command, params)\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002227C55BAC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...Thunk [0x76666A39+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77BA7D1D+173]\\\\n\\\\tRtlGetFullPathName_UEx [0x77BA7CEB+123]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/wishlist\" class=\"ico-wishlist\">...</a> is not clickable at point (931, 9). Other element would receive the click: <div id=\"bar-notification\" class=\"bar-notification success\" style=\"display: block;\">...</div>\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0084F243]\nE       \t(No symbol) [0x007D7FD1]\nE       \t(No symbol) [0x006CD04D]\nE       \t(No symbol) [0x007028B9]\nE       \t(No symbol) [0x007008CC]\nE       \t(No symbol) [0x006FE4CB]\nE       \t(No symbol) [0x006FD164]\nE       \t(No symbol) [0x006F32A6]\nE       \t(No symbol) [0x0071858C]\nE       \t(No symbol) [0x006F2BFF]\nE       \t(No symbol) [0x00718804]\nE       \t(No symbol) [0x0072C9EB]\nE       \t(No symbol) [0x00718386]\nE       \t(No symbol) [0x006F163C]\nE       \t(No symbol) [0x006F269D]\nE       \tGetHandleVerifier [0x00AE9A22+2655074]\nE       \tGetHandleVerifier [0x00ADCA24+2601828]\nE       \tGetHandleVerifier [0x008F8C0A+619850]\nE       \tGetHandleVerifier [0x008F7830+614768]\nE       \t(No symbol) [0x007E05FC]\nE       \t(No symbol) [0x007E5968]\nE       \t(No symbol) [0x007E5A55]\nE       \t(No symbol) [0x007F051B]\nE       \tBaseThreadInitThunk [0x76666A39+25]\nE       \tRtlGetFullPathName_UEx [0x77BA7D1D+173]\nE       \tRtlGetFullPathName_UEx [0x77BA7CEB+123]\n\nC:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: ElementClickInterceptedException","steps":[{"name":"Проверить, что открыта страница авторизации","time":{"start":1673128230636,"stop":1673128230729,"duration":93},"status":"passed","steps":[],"attachments":[{"uid":"7862efcc6007265f","name":"Screenshot","source":"7862efcc6007265f.png","type":"image/png","size":115654}],"parameters":[{"name":"path","value":"'50-physical-gift-card'"}],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true},{"name":"Добавить товар в вишлист","time":{"start":1673128236070,"stop":1673128239476,"duration":3406},"status":"passed","steps":[{"name":"Заполнить данные подарочной карты","time":{"start":1673128236590,"stop":1673128238750,"duration":2160},"status":"passed","steps":[],"attachments":[{"uid":"c1b0d848a8d8d993","name":"Screenshot","source":"c1b0d848a8d8d993.png","type":"image/png","size":124619}],"parameters":[{"name":"is_new_sender","value":"True"}],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true},{"name":"Указать количество товара: 1","time":{"start":1673128238750,"stop":1673128239093,"duration":343},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"Кликнуть по кнопке \"Add to wishlist\"","time":{"start":1673128239093,"stop":1673128239252,"duration":159},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"attachments":[{"uid":"56a1baa28d161b0d","name":"Screenshot","source":"56a1baa28d161b0d.png","type":"image/png","size":114789}],"parameters":[{"name":"quantity","value":"1"},{"name":"is_new_sender","value":"True"}],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":3,"hasContent":true},{"name":"Проверить, что появилось сообщение о добавлении товара в вишлист","time":{"start":1673128239476,"stop":1673128240222,"duration":746},"status":"passed","steps":[{"name":"Проверить, что сообщение появилось","time":{"start":1673128239476,"stop":1673128240091,"duration":615},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"Проверить текст сообщения","time":{"start":1673128240091,"stop":1673128240123,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"attachments":[{"uid":"2cdafb9ca3ebf3e","name":"Screenshot","source":"2cdafb9ca3ebf3e.png","type":"image/png","size":114028}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":2,"hasContent":true},{"name":"Проверить, что в хедере отображается количество товара в вишлисте","time":{"start":1673128240222,"stop":1673128240368,"duration":146},"status":"passed","steps":[],"attachments":[{"uid":"4cca03b83250644f","name":"Screenshot","source":"4cca03b83250644f.png","type":"image/png","size":114028}],"parameters":[{"name":"expected_quantity","value":"1"}],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true},{"name":"Перейти на страницу вишлиста","time":{"start":1673128240368,"stop":1673128241574,"duration":1206},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/wishlist\" class=\"ico-wishlist\">...</a> is not clickable at point (931, 9). Other element would receive the click: <div id=\"bar-notification\" class=\"bar-notification success\" style=\"display: block;\">...</div>\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0084F243]\n\t(No symbol) [0x007D7FD1]\n\t(No symbol) [0x006CD04D]\n\t(No symbol) [0x007028B9]\n\t(No symbol) [0x007008CC]\n\t(No symbol) [0x006FE4CB]\n\t(No symbol) [0x006FD164]\n\t(No symbol) [0x006F32A6]\n\t(No symbol) [0x0071858C]\n\t(No symbol) [0x006F2BFF]\n\t(No symbol) [0x00718804]\n\t(No symbol) [0x0072C9EB]\n\t(No symbol) [0x00718386]\n\t(No symbol) [0x006F163C]\n\t(No symbol) [0x006F269D]\n\tGetHandleVerifier [0x00AE9A22+2655074]\n\tGetHandleVerifier [0x00ADCA24+2601828]\n\tGetHandleVerifier [0x008F8C0A+619850]\n\tGetHandleVerifier [0x008F7830+614768]\n\t(No symbol) [0x007E05FC]\n\t(No symbol) [0x007E5968]\n\t(No symbol) [0x007E5A55]\n\t(No symbol) [0x007F051B]\n\tBaseThreadInitThunk [0x76666A39+25]\n\tRtlGetFullPathName_UEx [0x77BA7D1D+173]\n\tRtlGetFullPathName_UEx [0x77BA7CEB+123]\n\n","statusTrace":"  File \"D:\\a\\demo_web_shop\\demo_web_shop\\utils\\steps.py\", line 29, in impl\n    step_result = func(*args, **kwargs)\n  File \"D:\\a\\demo_web_shop\\demo_web_shop\\pages\\header.py\", line 163, in go_to_wishlist_page\n    self.find_element(*Locators.WISHLIST_LINK).click()\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 410, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.10.9\\x64\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[{"uid":"a7f1f6c09ae79437","name":"Screenshot","source":"a7f1f6c09ae79437.png","type":"image/png","size":119004}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":6,"stepsCount":10,"hasContent":true},"afterStages":[{"name":"browser::0","time":{"start":1673128241736,"stop":1673128244172,"duration":2436},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Вишлист"},{"name":"epic","value":"Frontend"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_wishlist"},{"name":"subSuite","value":"TestCart"},{"name":"host","value":"fv-az435-776"},{"name":"thread","value":"4888-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_wishlist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"8e5bcb75e3070a3c.json","parameterValues":[]}